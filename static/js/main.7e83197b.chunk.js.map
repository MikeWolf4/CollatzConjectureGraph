{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","count","setCount","time","setTime","timeOn","setTimeOn","React","useEffect","interval","setInterval","prevTime","clearInterval","threeXOneBox","original","modOriginal","data","labels","datasets","label","backgroundColor","borderColor","fontColor","hoverBackgroundColor","hoverBorderColor","push","ThreeXRule","className","src","logo","alt","height","width","options","scales","y","ticks","color","x","plugins","legend","font","size","responsive","maintainAspectRatio","length","placeholder","onChange","e","originalInput","target","value","type","name","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8JAAe,MAA0B,iC,uBCgK1BA,MA3Jf,WAEE,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEAC,IAAMC,WAAU,WAGd,IAAIC,EAAW,KAWf,OAVIJ,EACFI,EAAWC,aAAY,WACrBN,GAAQ,SAAAO,GAAQ,OAAIA,EAAW,OAC9B,KAGHC,cAAcH,GAIT,kBAAMG,cAAcH,MAE1B,CAACJ,IAIJ,IAAIQ,EAAgB,GAEhBC,EAAWb,EAEXc,EAAcD,EA4BdE,EAAO,CAETC,OAAQJ,EACRK,SAAU,CAAC,CACTC,MAAM,oCACNH,KAAMH,EACNO,gBAAiB,OACjBC,YAAa,YACbC,UAAW,QACXC,qBAAsB,MACtBC,iBAAkB,SAoCtB,OAhBA,WACE,KAAsB,GAAfT,GACDA,EAAc,GAAK,EACrBA,GAA4B,EAG5BA,EAAc,EAAIA,EAAc,EAElCF,EAAaY,KAAKV,EAAc,KAIpCW,GAME,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEA,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,2DAEE,cAAC,IAAD,CAAMC,OAAQ,EAAGC,MAAO,GAAIhB,KAAMA,EAAMiB,QA9EhC,CACZC,OACA,CACEC,EAAE,CAAEC,MAAO,CAACC,MAAO,UACnBC,EAAE,CAAEF,MAAO,CAACC,MAAO,WAErBE,QAAS,CACPC,OAAQ,CACJvB,OAAQ,CAEJoB,MAAO,QACPI,KAAM,CACFC,KAAM,OAKpBC,YAAY,EACZC,qBAAqB,KA8DjB,8BACE,0CAAa9B,KACb,2CAAcD,EAAagC,aAE7B,4BACE,gCACE,uBAAOC,YAAY,mBAAmBC,SAAU,SAAAC,GAAC,OA7CtCC,EA6CsDD,EAAEE,OAAOC,WAzChFjD,EADC+C,EAAgB,EACRA,EAEF,GANX,IAAqBA,GA6CuEG,KAAK,OAAOC,KAAK,aAGvG,sBAAKC,GAAG,cAAR,UACA,4BAAInD,IACJ,wBAAQoD,QAAS,kBAAMjD,GAAU,IAAjC,mBACA,wBAAQiD,QAAS,kBAAMjD,GAAU,IAAjC,kBACA,wBAAQiD,QAAS,kBAAMjD,GAAU,IAAjC,oBACA,wBAAQiD,QAAS,kBAAMnD,EAAQ,IAA/B,4BCzHOoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7e83197b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\n\nfunction App() {\n\n  const [count, setCount] = useState(1)\n  const [time, setTime] = useState(1)\n  const [timeOn, setTimeOn] = useState(false)\n\n  React.useEffect(() =>{\n\n    \n    let interval = null;\n    if (timeOn){\n      interval = setInterval(()=>{\n        setTime(prevTime => prevTime + 1)\n      }, 100)\n      \n    }else {\n      clearInterval(interval)\n   \n    }\n\n    return () => clearInterval(interval)\n\n  }, [timeOn])\n\n\n  // 3x+1 array / value\n  let threeXOneBox  = []\n\n  let original = count;\n\n  let modOriginal = original\n   // 3x+1 array / value\n\n  // graph set up ////////////\n  let options = {\n    scales: \n    {\n      y:{ ticks: {color: \"white\"}},\n      x:{ ticks: {color: \"white\"}}\n    },\n    plugins: {\n      legend: {\n          labels: {\n              // This more specific font property overrides the global property\n              color: 'white',\n              font: {\n                  size: 18,\n              }\n          }\n      }\n  },\n    responsive: true,\n    maintainAspectRatio: true,\n  };\n\n  ///////////////////\n  ///////////////////\n\n  let data = {\n\n    labels: threeXOneBox,\n    datasets: [{\n      label:\"( 3x+1 ) if odd | ( x/2 ) if even\",\n      data: threeXOneBox,\n      backgroundColor: 'blue',\n      borderColor: \"lightblue\", \n      fontColor: \"white\",\n      hoverBackgroundColor: \"red\",\n      hoverBorderColor: \"red\",\n    }],\n  }\n  // graph set up ////////////\n\n\n  // setCount ////////////\n  function setOriginal(originalInput){\n\n\n    if(originalInput > 0){\n      setCount(originalInput)\n    }else{\n    setCount(1)\n    }\n    \n  }\n  // setCount ////////////\n\n  // 3x+1 sequencer\n  function ThreeXRule() {\n    while (modOriginal != 1) {\n      if (modOriginal % 2 == 0) {\n        modOriginal = modOriginal / 2\n      }\n      else{\n        modOriginal = 3 * modOriginal + 1\n      }\n      threeXOneBox.push(modOriginal + \" \")\n    }\n    return modOriginal\n  }\n  ThreeXRule();\n  // 3x+1 sequencer\n\n\n  return (\n    \n    <div className=\"App\">\n      <header className=\"App-header\">\n\n      <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n      <p> Collatz Conjecture Graph </p>\n      \n        <Line height={3} width={12} data={data} options={options}/>\n        \n        <p>\n          <div>Value: {original}</div> \n          <div>Length: {threeXOneBox.length}</div>\n        </p>\n        <p>\n          <label>\n            <input placeholder=\"Positive Integer\" onChange={e => setOriginal(e.target.value)} type=\"text\" name=\"name\" />\n          </label>\n        </p>\n        <div id=\"timerButton\">\n        <p>{time}</p>\n        <button onClick={() => setTimeOn(true)}>Start</button>\n        <button onClick={() => setTimeOn(false)}>Stop</button>\n        <button onClick={() => setTimeOn(true)}>Resume</button>\n        <button onClick={() => setTime(0)}>Reset</button>\n        </div>\n      </header>\n    </div>\n  );\n  \n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}